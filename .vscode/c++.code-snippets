{
  "C++ boiler plate": {
    "scope": "cpp",
    "prefix": "c++",
    "body": [
      "/*",
      "    author : Anand",
      "",
      "*/",
      "",
      "#include <bits/stdc++.h>",
      "",
      "// #include <math.h>",
      "",
      "// #include <algorithm>",
      "// #include <functional>",
      "// #include <iostream>",
      "// #include <map>",
      "// #include <queue>",
      "// #include <set>",
      "// #include <stack>",
      "// #include <utility>",
      "// #include <vector>",
      "",
      "#define sz(a) int((a).size())",
      "#define ll long long",
      "#define pb push_back",
      "#define mp(a, b) make_pair(ll(a), ll(b))",
      "#define F first",
      "#define S second",
      "#define all(c) (c).begin(), (c).end()",
      "#define PI 3.1415926535897932384626",
      "",
      "using namespace std;",
      "",
      "const int INF = 1e9 + 5;",
      "const int MOD = 1000000007;",
      "const double ZERO = 10e-9;",
      "const int N = 3e5, M = N;",
      "",
      "int DP[N];",
      "",
      "void FIO() {",
      "#ifndef ONLINE_JUDGE",
      "    freopen(\"main.inp\", \"r\", stdin);",
      "    freopen(\"main.out\", \"w\", stdout);",
      "#endif",
      "    ios_base::sync_with_stdio(false);",
      "    cin.tie(0);",
      "}",
      "",
      "int main() {",
      "    FIO();",
      "    $0",
      "    return 0;",
      "}"
    ],
    "description": "C++ boiler plate"
  },
  "Vector equality": {
    "scope": "cpp",
    "prefix": "ve",
    "body": [
      "template <typename T>",
      "bool isEqual(const vector<T> &v1, const vector<T> &v2) {",
      "    auto pair = std::mismatch(v1.begin(), v1.end(), v2.begin());",
      "    return (pair.first == v1.end() && pair.second == v2.end());",
      "}"
    ],
    "description": "Vector Equality Check"
  },
  "Vector print": {
    "scope": "cpp",
    "prefix": "vp",
    "body": [
      "template <typename T>",
      "void printArray(const vector<T> &arr) {",
      "    cout << \"[ \";",
      "    for (ll i = 0; i < sz(arr) - 1; ++i) {",
      "        cout << arr[i] << \", \";",
      "    }",
      "    cout << arr[sz(arr) - 1] << \" ]\\n\";",
      "}"
    ],
    "description": "Vector Equality Check"
  },
  "Graph": {
    "scope": "cpp",
    "prefix": "gph",
    "body": [
      "vector<int> g[N];",
      "",
      "void ipgraph(int n, int m) {",
      "    int i, u, v;",
      "    while (m--) {",
      "        cin >> u >> v;",
      "        g[u].pb(v);",
      "        g[v].pb(u);",
      "    }",
      "}",
      "",
      "void dfs(int u, int par) {",
      "    for (int v : g[u]) {",
      "        if (v == par) continue;",
      "        dfs(v, u);",
      "    }",
      "}"
    ],
    "description": "Graph base"
  },
  "Modular Exp": {
    "scope": "cpp",
    "prefix": "mpow",
    "body": [
      "int mpow(int base, int exp) {",
      "    base %= mod;",
      "    int result = 1;",
      "    while (exp > 0) {",
      "        if (exp & 1) result = ((ll)result * base) % mod;",
      "        base = ((ll)base * base) % mod;",
      "        exp >>= 1;",
      "    }",
      "    return result;",
      "}"
    ],
    "description": "Modular exponentiation"
  }
}
