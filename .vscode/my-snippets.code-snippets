{
    "CPP BASIC": {
      "prefix": "cp1",
      "body": [
        "/*",
        "  author : Anand",
        "*/",
        "",
        "#include <bits/stdc++.h>",
        "",
        "using namespace std;",
        "",
        "#define PI 3.1415926535897932384626",
        "#define int long long",
        "#define ll long long",
        "",
        "#ifndef ONLINE_JUDGE",
        "#define debug(...) cerr << \"\\t\" << #__VA_ARGS__ << \" : \" << (__VA_ARGS__) << endl;",
        "#else",
        "#define debug(...) 42",
        "#endif",
        "",
        "const int INF = 1e18 + 5;",
        "const int MOD = 1000000007;",
        "const int N = 5e5;",
        "",
        "vector<int> a(N);",
        "vector<int> dp(N);",
        "int n;",
        "",
        "void solve() {",
        "	${0}",
        "}",
        "",
        "signed main() {",
        "	cin.tie(nullptr);",
        "	ios::sync_with_stdio(false);",
        "",
        "	int T = 1;",
        "	// cin >> T;",
        "	while (T--) {",
        "		solve();",
        "	}",
        "",
        "	return 0;",
        "}"
      ],
      "description": "CPP BASIC"
    },
    "CPP ADVANCED": {
      "prefix": "cp2",
      "body": [
        "/*",
        "  author : Anand",
        "*/",
        "",
        "#include <bits/stdc++.h>",
        "",
        "using namespace std;",
        "",
        "#define PI 3.1415926535897932384626",
        "#define int long long",
        "#define ll long long",
        "",
        "template <typename A, typename B>",
        "string to_string(pair<A, B> p);",
        "",
        "template <typename A, typename B, typename C>",
        "string to_string(tuple<A, B, C> p);",
        "",
        "template <typename A, typename B, typename C, typename D>",
        "string to_string(tuple<A, B, C, D> p);",
        "",
        "string to_string(const string& s) {",
        "    return '\"' + s + '\"';",
        "}",
        "",
        "string to_string(const char* s) {",
        "    return to_string((string)s);",
        "}",
        "",
        "string to_string(bool b) {",
        "    return (b ? \"true\" : \"false\");",
        "}",
        "",
        "string to_string(vector<bool> v) {",
        "    bool first = true;",
        "    string res = \"{\";",
        "    for (int i = 0; i < static_cast<int>(v.size()); i++) {",
        "        if (!first) {",
        "            res += \", \";",
        "        }",
        "        first = false;",
        "        res += to_string(v[i]);",
        "    }",
        "    res += \"}\";",
        "    return res;",
        "}",
        "",
        "template <size_t N>",
        "string to_string(bitset<N> v) {",
        "    string res = \"\";",
        "    for (size_t i = 0; i < N; i++) {",
        "        res += static_cast<char>('0' + v[i]);",
        "    }",
        "    return res;",
        "}",
        "",
        "template <typename A>",
        "string to_string(A v) {",
        "    bool first = true;",
        "    string res = \"{\";",
        "    for (const auto& x : v) {",
        "        if (!first) {",
        "            res += \", \";",
        "        }",
        "        first = false;",
        "        res += to_string(x);",
        "    }",
        "    res += \"}\";",
        "    return res;",
        "}",
        "",
        "template <typename A, typename B>",
        "string to_string(pair<A, B> p) {",
        "    return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";",
        "}",
        "",
        "template <typename A, typename B, typename C>",
        "string to_string(tuple<A, B, C> p) {",
        "    return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\";",
        "}",
        "",
        "template <typename A, typename B, typename C, typename D>",
        "string to_string(tuple<A, B, C, D> p) {",
        "    return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\";",
        "}",
        "",
        "void debug_out() { cerr << endl; }",
        "",
        "template <typename Head, typename... Tail>",
        "void debug_out(Head H, Tail... T) {",
        "    cerr << \" \" << to_string(H);",
        "    debug_out(T...);",
        "}",
        "",
        "#ifndef ONLINE_JUDGE",
        "#define debug(...) cerr << \"\\t[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)",
        "#else",
        "#define debug(...) 42",
        "#endif",
        "",
        "const int INF = 1e18 + 5;",
        "const int MOD = 1000000007;",
        "",
        "/*/////////////////////////////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/",
        "",
        "const int INF = 1e18 + 5;",
        "const int MOD = 1000000007;",
        "const int N = 5e5;",
        "",
        "vector<int> a(N);",
        "vector<int> dp(N);",
        "int n;",
        "",
        "void solve() {",
        "	${0}",
        "}",
        "",
        "signed main() {",
        "    cin.tie(nullptr);",
        "    ios::sync_with_stdio(false);",
        "",
        "    int T = 1;",
        "    // cin >> T;",
        "    while (T--) {",
        "        solve();",
        "    }",
        "",
        "    return 0;",
        "}"
      ],
      "description": "CPP ADVANCED"
    }
  }