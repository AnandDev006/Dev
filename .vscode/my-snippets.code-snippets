{
  "VECTOR EQUAL": {
    "prefix": "cpve",
    "body": [
      "template <typename T>",
      "bool isVectorEqual(vector<T> v1, vector<T> v2) { return v1 == v2; }"
    ],
    "description": "VECTOR EQUAL"
  },
  "VECTOR PRINT": {
    "prefix": "cpvp",
    "body": [
      "template<typename T_vector>",
      "void output_vector(const T_vector &v, bool add_one = false, int start = -1, int end = -1) {",
      "    if (start < 0) start = 0;",
      "    if (end < 0) end = int(v.size());",
      "",
      "    for (int i = start; i < end; i++)",
      "        cout << v[i] + (add_one ? 1 : 0) << (i < end - 1 ? ' ' : '\\n');",
      "}"
    ],
    "description": "VECTOR PRINT"
  },
  "CPP BASIC": {
    "prefix": "cp1",
    "body": [
      "/*",
      "  author : Anand",
      "*/",
      "",
      "#include <bits/stdc++.h>",
      "",
      "using namespace std;",
      "",
      "#define ll long long",
      "",
      "void solve(int tc = 1) {",
      "  ${0}"
      "}",
      "",
      "signed main() {",
      "  cin.tie(nullptr);",
      "  ios::sync_with_stdio(false);",
      "",
      "  int tc = 1;",
      "  // cin >> tc;",
      "  for (int t = 1; t <= tc; ++t) solve(t);",
      "",
      "  return 0;",
      "}"
    ],
    "description": "CPP NO TC"
  },
  "CPP ADVANCED": {
    "prefix": "cp2",
    "body": [
      "/*",
      "  author : Anand",
      "*/",
      "",
      "#include <bits/stdc++.h>",
      "",
      "using namespace std;",
      "",
      "#define ll long long",
      "",
      "void solve(int tc = 1) {",
      "  ${0}",
      "}",
      "",
      "signed main() {",
      "  cin.tie(nullptr);",
      "  ios::sync_with_stdio(false);",
      "",
      "  int tc = 1;",
      "  cin >> tc;",
      "  for (int t = 1; t <= tc; ++t) solve(t);",
      "",
      "  return 0;",
      "}"
    ],
    "description": "CPP TC"
  },
  "Debug Basic": {
    "prefix": "dbg1",
    "body": [
      "/* <DEBUG> */",
      "",
      "template <typename A, typename B>",
      "ostream &operator<<(ostream &os, const pair<A, B> &p) { return os << '(' << p.first << \", \" << p.second << ')'; }",
      "template <typename T_container, typename T = typename enable_if<!is_same<T_container, string>::value, typename T_container::value_type>::type>",
      "ostream &operator<<(ostream &os, const T_container &v) {",
      "  os << '{';",
      "  string sep;",
      "  for (const T &x : v) os << sep << x, sep = \", \";",
      "  return os << '}';",
      "}",
      "",
      "void dbg_out() { cerr << endl; }",
      "template <typename Head, typename... Tail>",
      "void dbg_out(Head H, Tail... T) {",
      "  cerr << ' ' << H;",
      "  dbg_out(T...);",
      "}",
      "",
      "#ifndef ONLINE_JUDGE",
      "#define dbg(...) cerr << \"(\" << #__VA_ARGS__ << \"):\", dbg_out(__VA_ARGS__)",
      "#else",
      "#define dbg(...) 42",
      "#endif",
      "",
      "/* </DEBUG> */"
    ],
    "description": "Debug Basic"
  },
  "Debug Advanced": {
    "prefix": "dbg2",
    "body": [
      "/* <DEBUG> */",
      "",
      "template <typename A, typename B>",
      "string to_string(pair<A, B> p);",
      "",
      "template <typename A, typename B, typename C>",
      "string to_string(tuple<A, B, C> p);",
      "",
      "template <typename A, typename B, typename C, typename D>",
      "string to_string(tuple<A, B, C, D> p);",
      "",
      "string to_string(const string& s) {",
      "  return '\"' + s + '\"';",
      "}",
      "",
      "string to_string(const char* s) {",
      "  return to_string((string)s);",
      "}",
      "",
      "string to_string(bool b) {",
      "  return (b ? \"true\" : \"false\");",
      "}",
      "",
      "string to_string(vector<bool> v) {",
      "  bool first = true;",
      "  string res = \"{\";",
      "  for (int i = 0; i < static_cast<int>(v.size()); i++) {",
      "    if (!first) {",
      "      res += \", \";",
      "    }",
      "    first = false;",
      "    res += to_string(v[i]);",
      "  }",
      "  res += \"}\";",
      "  return res;",
      "}",
      "",
      "template <size_t N>",
      "string to_string(bitset<N> v) {",
      "  string res = \"\";",
      "  for (size_t i = 0; i < N; i++) {",
      "    res += static_cast<char>('0' + v[i]);",
      "  }",
      "  return res;",
      "}",
      "",
      "template <typename A>",
      "string to_string(A v) {",
      "  bool first = true;",
      "  string res = \"{\";",
      "  for (const auto& x : v) {",
      "    if (!first) {",
      "      res += \", \";",
      "    }",
      "    first = false;",
      "    res += to_string(x);",
      "  }",
      "  res += \"}\";",
      "  return res;",
      "}",
      "",
      "template <typename A, typename B>",
      "string to_string(pair<A, B> p) {",
      "  return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\";",
      "}",
      "",
      "template <typename A, typename B, typename C>",
      "string to_string(tuple<A, B, C> p) {",
      "  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\";",
      "}",
      "",
      "template <typename A, typename B, typename C, typename D>",
      "string to_string(tuple<A, B, C, D> p) {",
      "  return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\";",
      "}",
      "",
      "void debug_out() { cerr << endl; }",
      "",
      "template <typename Head, typename... Tail>",
      "void debug_out(Head H, Tail... T) {",
      "  cerr << \" \" << to_string(H);",
      "  debug_out(T...);",
      "}",
      "",
      "#ifndef ONLINE_JUDGE",
      "#define dbg(...) cerr << \"\\t[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)",
      "#else",
      "#define dbg(...) 42",
      "#endif",
      "",
      "/* </DEBUG> */"
    ],
    "description": "Debug Advanced"
  }
}
